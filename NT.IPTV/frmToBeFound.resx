<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHl9fgB5fX4AeX1+Bnl9fhp5fX4Ad3t8NYSIicKco6P/n6am95+m
        ppufpqYWn6amAAAAAAAAAAAAAAAAAE5olABOaJQATmiUAE5olABOaJQATmeTAERYewBAUnEAQFJyAEBS
        cgBAUnIAQFJyAEBScgBAUnIAQFJyAEBScgBAUnIAP1JyAF9qeQB5fX5JeX1+x3p9flZ5fX7De3+A5ZSa
        mpagp6ern6am9p+mpo2fpqYDAAAAAAAAAABOaJQATmiUAE5olA5OaJRkTmiUgU5olIBOaJSARlt/gEBS
        cYBAUnKAQFJygEBScoBAUnKAQFJygEBScoBAUnKAQFJygEBScoA/UnJ/R1d0gHV6fc1yeHz6bnV8y3d7
        fv5faXinFSxaDL7CuAOfpqagn6am4p+mpiYAAAAAAAAAAE5olABOaJQATmiUZU5olP1OaJT/TmiU/0tk
        jv9BVHb/P1Fx/z9Rcf8/UXH/P1Fx/z9Rcf8/UXH/P1Fx/z9Rcf8/UXH/P1Fx/z9Scv9XY3f/d3t+/2Js
        ef9zeH3/Zm96/0RVdPp3g5CnpqyqLp+mpnufpqbtn6amMgAAAAAAAAAATmiUAE5olABOaJSHTmiU/05o
        lP9OaJP/UmaJ/1Jif/9SYn//UmN//1Jjf/9SY3//UmN//1Jjf/9SY3//UmN//1Njf/9KW3r/R1dz/3B3
        fP9sc3v/aHB6/3V6ff9LWnT/WGd//5igov+jqqmdo6mpy5+mpsafpqYTAAAAAAAAAABOaJQATmiUAE5o
        lIdOaJT/TGeT/2+Epv/GzNX/ztLX/8fM0v/Gy9H/x8vR/8fL0f/Hy9H/x8vR/8fL0f/Hy9H/ys7T/7K5
        xP9qc4H/dXp9/2Jref92e33/Xml4/0VWdf+Ejpf/oain2bW6up+xt7f2oaenXKOqqgAAAAAAAAAAAE5o
        lABOaJQATmiUh05olP9MZpP/m6nA//Dx8f/t7u//5+nq/97h4//a3d//2t3f/9rd3//a3d//2t3f/9rd
        3//k5uf/0tTV/4CEhv9mb3n/bHN7/3B2fP9GVnP/ZHKG/5uipP+Xn6S4vMHB4LvAwLOzubkLsLa2AAAA
        AAAAAAAATmiUAE5olABOaJSHTmiU/0xmk/+dq8L/7vDw/+zu7//t7/D/6+3u/+Tm6P/c3+H/2dze/9nc
        3v/Z3N7/3N/h/+Xn6P+fo6P/fYGE/253gv92e33/V2N2/0pbeP+Pl53/jJWc/5Wep/a9wsLsvMHBPrm/
        vwCrsrIAAAAAAAAAAABOaJQATmiUAE5olIdOaJT/TGaT/52rwv/u8PD/6+3u/+Xn6P/k5uf/5Obn/+Hj
        5P/Z3N3/09bY/9HU1v/d3+H/xcjJ/36Bgv+ipab/iIyN/2hwef9DVHP/cH2N/5qio/+Ai5j/s7m7/73C
        wpG8wcECvMHBALzBwQAAAAAAAAAAAE5olABOaJQATmiUh05olP9MZpP/navC/+/w8f/m6On/w8TG/72+
        wP+9vsD/vb7A/72+wP+5ur3/s7W3/7i6vP+doaL/j5OU/6Wpqv9+goP/YG2B/1FhfP+WnqH/hY+Y/5yk
        rP++w8PavMHBJrzBwQC8wcEAAAAAAAAAAAAAAAAATmiUAE5olABOaJSHTmiU/0xmk/+dq8L/7vDw/+vt
        7v/l5+j/5Obn/+Tm5//k5uf/5Obn/+Tm5//k5uj/yMzN/52kpP+4vb3/n6Wm/6msrf+xuMP/go2X/5ae
        of+Ej5v/try9/6OrsY3BxsQAvMHBALzBwQAAAAAAAAAAAAAAAABOaJQATmiUAE5olIdOaJT/TGaT/52r
        wv/u8PD/7O7v/+3v8P/t7/D/7e/w/+3v8P/t7/D/7e/w/+7w8f/Hy8z/pays/8/T1P+lq6z/ur+//8rO
        z/+fpqf/gIqW/6evtP+ep67/U2N+f298kAC8wcEAAAAAAAAAAAAAAAAAAAAAAE5olABOaJQATmiUh05o
        lP9MZpP/navC/+7w8P/r7e7/5efo/+Tm5//k5uf/5Obn/+Tm5//k5uf/5efo/8XJyv+jqqr/1NfY/7q/
        v/+fpqb/oaio/6KprP+Vnqj/try9/2d1i/89T3CAP1FxAAAAAAAAAAAAAAAAAAAAAAAAAAAATmiUAE5o
        lABOaJSHTmiU/0xmk/+dq8L/7/Dx/+bo6f/DxMb/vb7A/72+wP+9vsD/vb7A/72+wP+9vsD/t7m7/6Ko
        qP+prq//tbe5/7a4uv/N0dH/zdHT/7/ExP+QmqX/Q1V0/z9RcoBAUnIAAAAAAAAAAAAAAAAAAAAAAAAA
        AABOaJQATmiUAE5olIdOaJT/TGaT/52rwv/u8PD/6+3u/+Xn6P/k5uf/5Obn/+Tm5//k5uf/5Obn/+Tm
        5//k5uf/xsrL/6Gnp/+orq7/wMXF/83R0v/BxsX/pq2z/1Vlf/8/UXH/QFJygEBScgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAE5olABOaJQATmiUh05olP9MZpP/navC/+7w8P/s7u//7e/w/+3v8P/t7/D/7e/w/+3v
        8P/t7/D/7e/w/+3v8P/q7e7/z9PU/7K4uP+ssrL/v8TE/9DT1P+BjZ//PU9w/0BScv9AUnKAQFJyAAAA
        AAAAAAAAAAAAAAAAAAAAAAAATmiUAE5olABOaJSHTmiU/0xmk/+dq8L/7vDw/+vt7v/l5+j/5Obn/+Tm
        5//k5uf/5Obn/+Tm5//k5uf/5Obn/+Tm5//l5+j/4OLk/9zf4P/m6On/7O7v/4OPo/89T3D/QFJy/0BS
        coBAUnIAAAAAAAAAAAAAAAAAAAAAAAAAAABOaJQATmiUAE5olIdOaJT/TGaT/52rwv/v8PH/5ujp/8PE
        xv+9vsD/vb7A/72+wP+9vsD/vb7A/72+wP+9vsD/vb7A/72+wP+9vsD/w8TG/+fp6v/t7/D/g4+j/z1P
        cP9AUnL/QFJygEBScgAAAAAAAAAAAAAAAAAAAAAAAAAAAE5olABOaJQATmiUh05olP9MZpP/navC/+7w
        8P/r7e7/5efo/+Tm5//k5uf/5Obn/+Tm5//k5uf/5Obn/+Tm5//k5uf/5Obn/+Tm5//l5+j/6+3u/+3u
        7/+Dj6P/PU9w/0BScv9AUnKAQFJyAAAAAAAAAAAAAAAAAAAAAAAAAAAATmiUAE5olABOaJSHTmiU/0xm
        k/+dq8L/7vDw/+zu7//t7/D/7e/w/+3v8P/t7/D/7e/w/+3v8P/t7/D/7e/w/+3v8P/t7/D/7e/w/+3v
        8P/s7u//7O7v/4OPo/89T3D/QFJy/0JWd4A/UXAAAAAAAAAAAAAAAAAAAAAAAAAAAABOaJQATmiUAE5o
        lIdOaJT/TGaT/52rwv/u8PD/6+3u/+Xn6P/k5uf/5Obn/+Tm5//k5uf/5Obn/+Tm5//k5uf/5Obn/+Tm
        5//k5uf/5efo/+vt7v/t7u//g4+j/z1Pb/9DVnn/S2ONgEhehAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5o
        lABOaJQATmiUh05olP9MZpP/navC/+/w8f/m6On/w8TG/72+wP+9vsD/vb7A/72+wP+9vsD/vb7A/72+
        wP+9vsD/vb7A/72+wP/DxMb/5ujp/+3v8P+Dj6P/PVBx/0lgiP9OaZWATmiUAAAAAAAAAAAAAAAAAAAA
        AAAAAAAATmiUAE5olABOaJSHTmiU/0xmk/+dq8L/7vDw/+vt7v/l5+j/5Obn/+Tm5//k5uf/5Obn/+Tm
        5//k5uf/5Obn/+Tm5//k5uf/5Obn/+Xn6P/r7e7/7e7v/4OPov9BVnr/TWeS/05olIBOaJQAAAAAAAAA
        AAAAAAAAAAAAAAAAAABOaJQATmiUAE5olIdOaJT/TGaT/52rwv/u8PD/7e/w/+7v8P/u8PH/7vDx/+7w
        8f/u8PH/7vDx/+7w8f/u8PH/7vDx/+7w8f/u8PH/7u/w/+3v8P/t7u//hJCl/0dgif9OaJT/TmiUgE5o
        lAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5olABOaJQATmiUh05olP9MZpP/m6nB/+vt7f/Kz8//xcnK/8XK
        yv/Fysr/xcrK/8XKyv/Fysr/xcrK/8XKyv/Fysr/xcrK/8XKyv/Fycr/ys7P/+jq6/+Gla//S2WR/05o
        lP9OaJSATmiUAAAAAAAAAAAAAAAAAAAAAAAAAAAATmiUAE5olABOaJSHTmiU/0xnk/9whaj/xs3W/7C2
        t/+iqan/oqmp/6Kpqf+iqaj/oqio/6KoqP+iqKj/oqio/6KpqP+iqan/oqmp/6KpqP+psLD/u8PP/2R7
        of9NZ5P/TmiU/05olIBOaJQAAAAAAAAAAAAAAAAAAAAAAAAAAABOaJQATmiUAE5olIBOaJT/TmiU/05o
        lP9bc5v/jZuu/6uzuP+rs7j/qrK4/7C2uf+1u7v/tbq6/7W6uv+1u7v/sLe5/6qyuP+rs7j/qrK4/4qY
        q/9YcJn/TWeU/05olP9OaJT/TmiUfE5olAAAAAAAAAAAAAAAAAAAAAAAAAAAAE5olABOaJQATmiUN05o
        lMlOaJThTmiU4E1nk+BRa5XgXHSa4F10muBcdJrgg5Gj8KSqqv+jqqryo6qq8qSqqv+CkaLwXHSa4F10
        muBcdJrgUmuW4E1nlOBOaJTgTmiU4U5olMlOaJQ2TmiUAAAAAAAAAAAAAAAAAAAAAAAAAAAATmiUAE5o
        lABOaJQATmiUE05olB9OaJQfTmiUH0xmkx9HY5EfR2KRHztZjhuhqa6Qoaen9Z2kpFaepaVXn6am9pWf
        o5A7WY4bR2KRH0djkR9MZpMfTmiUH05olB9OaJQfTmiUE05olABOaJQAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAATmiUAE5olABOaJQATmiUAE5olABOaJQATmiUAE5olABOaJQAlKGwALvAwHGwtrb1r7S0Vqmw
        sFejqan1oqmocYaTogBOaJQATmiUAE5olABOaJQATmiUAE5olABOaJQATmiUAE5olAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ+mpgC8wcEAvcHBJ7zB
        wc67wMDzur+/87i9vc6zubkntbu7AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALzB
        wQC8wcEAvMHBLLzBwYK8wcGCvcLCLKqwsAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///wAOAAAADAAAAAwAAAAMAAAADAAAAAwAAAAMAAAADAAAAAwAAAAcAA
        AAHAAAADwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AAAAfAAAAHwAAAB8AA
        AAfAAAAHwAAAB8AAAAfgAAAH/+AP///wD/8=
</value>
  </data>
</root>